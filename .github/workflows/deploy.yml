name: 🚀 Deploy to Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "选择部署环境"
        required: true
        default: "staging"
        type: choice
        options:
          - "staging"
          - "production"
      service:
        description: "选择要部署的服务 (all 表示全部)"
        required: true
        default: "all"
        type: choice
        options:
          - "all"
          - "web"
          - "api-gateway"
          - "registry"
          - "auth-service"
          - "user-service"
          - "workflow-service"
      image_tag:
        description: "镜像标签"
        required: false
        default: "latest"
        type: string
      force_recreate:
        description: "强制重新创建容器"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/telos

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 设置部署变量
        id: vars
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "compose_file=docker-compose.yml" >> $GITHUB_OUTPUT
            echo "env_file=.env.production" >> $GITHUB_OUTPUT
          else
            echo "compose_file=docker-compose.yml" >> $GITHUB_OUTPUT
            echo "env_file=.env.staging" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.event.inputs.force_recreate }}" == "true" ]]; then
            echo "compose_flags=--force-recreate" >> $GITHUB_OUTPUT
          else
            echo "compose_flags=" >> $GITHUB_OUTPUT
          fi

      - name: 🔧 准备环境变量
        run: |
          # 创建环境变量文件
          cat > .env << EOF
          # 镜像配置
          REGISTRY=${{ env.REGISTRY }}
          IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
          IMAGE_TAG=${{ github.event.inputs.image_tag }}

          # 应用配置
          NODE_ENV=${{ github.event.inputs.environment }}

          # 数据库配置
          DB_HOST=postgres
          DB_PORT=5432
          DB_NAME=telos_${{ github.event.inputs.environment }}
          DB_USER=telos
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Redis 配置
          REDIS_HOST=redis
          REDIS_PORT=6379

          # 认证配置
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}

          # API 配置
          NEXT_PUBLIC_API_URL=${{ vars.API_URL || 'http://localhost:8080' }}
          NEXT_PUBLIC_DOMAIN=${{ vars.DOMAIN || 'localhost:8800' }}
          EOF

      - name: 🔄 更新 Docker Compose 配置
        run: |
          # 更新 docker-compose.yml 使用环境变量中的镜像
          sed -i 's|build:|# build:|g' docker-compose.yml
          sed -i 's|context: \.|# context: \.|g' docker-compose.yml
          sed -i 's|dockerfile: \(.*\)|# dockerfile: \1|g' docker-compose.yml

          # 添加镜像配置
          services=("web" "api-gateway" "registry" "auth-service" "user-service" "workflow-service")

          for service in "${services[@]}"; do
            # 在每个服务的 container_name 行后添加 image 配置
            sed -i "/container_name: telos-${service}/a\\    image: \${REGISTRY}/\${IMAGE_PREFIX}-${service}:\${IMAGE_TAG}" docker-compose.yml
          done

      - name: 🐳 拉取 Docker 镜像
        run: |
          services="${{ github.event.inputs.service }}"

          if [[ "$services" == "all" ]]; then
            docker-compose pull
          else
            docker-compose pull "$services"
          fi

      - name: 🚀 部署服务
        run: |
          services="${{ github.event.inputs.service }}"
          flags="${{ steps.vars.outputs.compose_flags }}"

          if [[ "$services" == "all" ]]; then
            docker-compose up -d $flags
          else
            docker-compose up -d $flags "$services"
          fi

      - name: ⏳ 等待服务启动
        run: |
          echo "等待服务启动..."
          sleep 30

      - name: 🏥 健康检查
        run: |
          echo "检查服务健康状态..."

          services="${{ github.event.inputs.service }}"
          if [[ "$services" == "all" ]]; then
            check_services=("registry" "api-gateway" "auth-service" "user-service" "workflow-service" "web")
          else
            check_services=("$services")
          fi

          failed_services=()

          for service in "${check_services[@]}"; do
            echo "检查 $service 服务..."
            
            # 检查容器是否运行
            if ! docker-compose ps "$service" | grep -q "Up"; then
              echo "❌ $service 服务未运行"
              failed_services+=("$service")
              continue
            fi
            
            # 根据服务类型进行健康检查
            case "$service" in
              "web")
                if curl -f http://localhost:8800/api/health 2>/dev/null; then
                  echo "✅ $service 服务健康"
                else
                  echo "⚠️ $service 服务可能未完全启动"
                fi
                ;;
              "api-gateway")
                if curl -f http://localhost:8080/health 2>/dev/null; then
                  echo "✅ $service 服务健康"
                else
                  echo "⚠️ $service 服务可能未完全启动"
                fi
                ;;
              *)
                echo "✅ $service 容器运行中"
                ;;
            esac
          done

          if [[ ${#failed_services[@]} -gt 0 ]]; then
            echo "❌ 以下服务部署失败: ${failed_services[*]}"
            exit 1
          fi

      - name: 📊 部署状态
        run: |
          echo "## 🚀 部署结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**部署参数:**" >> $GITHUB_STEP_SUMMARY
          echo "- 环境: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- 服务: ${{ github.event.inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- 镜像标签: ${{ github.event.inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- 强制重新创建: ${{ github.event.inputs.force_recreate }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**服务状态:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker-compose ps >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🧹 清理
        if: always()
        run: |
          # 清理未使用的镜像
          docker image prune -f

          # 显示磁盘使用情况
          df -h

  rollback:
    if: failure()
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔄 回滚部署
        run: |
          echo "部署失败，开始回滚..."

          # 这里可以实现回滚逻辑
          # 例如：恢复到上一个版本的镜像
          echo "回滚功能需要根据具体需求实现"
          echo "建议使用镜像标签管理和数据库迁移版本控制"

      - name: 📢 通知回滚
        run: |
          echo "## ⚠️ 部署失败，已触发回滚" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "请检查部署日志并修复问题后重新部署。" >> $GITHUB_STEP_SUMMARY
