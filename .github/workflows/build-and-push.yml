name: 🐳 Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      service:
        description: "选择要构建的服务"
        required: true
        default: "all"
        type: choice
        options:
          - "all"
          - "web"
          - "mobile"
          - "api-gateway"
          - "registry"
          - "auth-service"
          - "user-service"
          - "workflow-service"
      tag:
        description: "镜像标签 (默认: latest)"
        required: false
        default: "latest"
        type: string
      push_to_registry:
        description: "是否推送到镜像仓库"
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/telos

jobs:
  build-web:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'web' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-web
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 Web 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-mobile:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'mobile' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-mobile
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 Mobile 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/mobile/Dockerfile
          target: metro
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-api-gateway:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'api-gateway' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-api-gateway
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 API Gateway 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api-gateway/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-registry:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'registry' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-registry
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 Registry 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/registry/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-auth-service:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'auth-service' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth-service
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 Auth Service 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/auth-service/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-user-service:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'user-service' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user-service
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 User Service 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/user-service/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-workflow-service:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'workflow-service' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-workflow-service
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送 Workflow Service 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/workflow-service/Dockerfile
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  summary:
    needs:
      [
        build-web,
        build-mobile,
        build-api-gateway,
        build-registry,
        build-auth-service,
        build-user-service,
        build-workflow-service,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 构建结果汇总
        run: |
          echo "## 🐳 Docker 镜像构建结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 服务 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY

          services=("web" "mobile" "api-gateway" "registry" "auth-service" "user-service" "workflow-service")
          results=("${{ needs.build-web.result }}" "${{ needs.build-mobile.result }}" "${{ needs.build-api-gateway.result }}" "${{ needs.build-registry.result }}" "${{ needs.build-auth-service.result }}" "${{ needs.build-user-service.result }}" "${{ needs.build-workflow-service.result }}")

          for i in "${!services[@]}"; do
            service="${services[$i]}"
            result="${results[$i]}"
            
            if [[ "$result" == "success" ]]; then
              echo "| $service | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
            elif [[ "$result" == "failure" ]]; then
              echo "| $service | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
            elif [[ "$result" == "skipped" ]]; then
              echo "| $service | ⏭️ 跳过 |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $service | ⏸️ 取消 |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**构建参数:**" >> $GITHUB_STEP_SUMMARY
          echo "- 服务: ${{ github.event.inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- 标签: ${{ github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- 推送到仓库: ${{ github.event.inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          echo "- 镜像仓库: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}" >> $GITHUB_STEP_SUMMARY
