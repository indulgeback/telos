name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [main, dev]
    paths:
      - "apps/**"
      - "services/**"
      - "docker-compose*.yml"
      - "Dockerfile*"
  pull_request:
    branches: [main, dev]
    paths:
      - "apps/**"
      - "services/**"
      - "docker-compose*.yml"
      - "Dockerfile*"

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/telos

jobs:
  # 检测变更的服务
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      mobile: ${{ steps.changes.outputs.mobile }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      registry: ${{ steps.changes.outputs.registry }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      workflow-service: ${{ steps.changes.outputs.workflow-service }}
      any-service: ${{ steps.changes.outputs.any-service }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 检测文件变更
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
            mobile:
              - 'apps/mobile/**'
            api-gateway:
              - 'apps/api-gateway/**'
            registry:
              - 'apps/registry/**'
            auth-service:
              - 'services/auth-service/**'
            user-service:
              - 'services/user-service/**'
            workflow-service:
              - 'services/workflow-service/**'
            any-service:
              - 'apps/**'
              - 'services/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'

  # 代码质量检查
  lint-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.any-service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: 📦 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.4"

      - name: 🔍 安装前端依赖
        if: needs.detect-changes.outputs.web == 'true' || needs.detect-changes.outputs.mobile == 'true'
        run: |
          if [[ "${{ needs.detect-changes.outputs.web }}" == "true" ]]; then
            cd apps/web
            pnpm install --frozen-lockfile
            cd ../..
          fi
          if [[ "${{ needs.detect-changes.outputs.mobile }}" == "true" ]]; then
            cd apps/mobile
            pnpm install --frozen-lockfile
            cd ../..
          fi

      - name: 🔍 Web 应用代码检查
        if: needs.detect-changes.outputs.web == 'true'
        run: |
          cd apps/web
          pnpm lint
          pnpm format:check

      - name: 🏗️ Web 应用构建测试
        if: needs.detect-changes.outputs.web == 'true'
        run: |
          cd apps/web
          pnpm build

      - name: 🔍 Go 服务代码检查
        if: |
          needs.detect-changes.outputs.api-gateway == 'true' ||
          needs.detect-changes.outputs.registry == 'true' ||
          needs.detect-changes.outputs.auth-service == 'true' ||
          needs.detect-changes.outputs.user-service == 'true' ||
          needs.detect-changes.outputs.workflow-service == 'true'
        run: |
          services=()
          [[ "${{ needs.detect-changes.outputs.api-gateway }}" == "true" ]] && services+=("apps/api-gateway")
          [[ "${{ needs.detect-changes.outputs.registry }}" == "true" ]] && services+=("apps/registry")
          [[ "${{ needs.detect-changes.outputs.auth-service }}" == "true" ]] && services+=("services/auth-service")
          [[ "${{ needs.detect-changes.outputs.user-service }}" == "true" ]] && services+=("services/user-service")
          [[ "${{ needs.detect-changes.outputs.workflow-service }}" == "true" ]] && services+=("services/workflow-service")

          for service in "${services[@]}"; do
            echo "检查 $service..."
            cd "$service"
            
            # 检查 go.mod 文件是否存在
            if [[ ! -f "go.mod" ]]; then
              echo "⚠️ go.mod 文件不存在，跳过 $service"
              cd - > /dev/null
              continue
            fi
            
            go mod tidy
            go fmt ./...
            go vet ./...
            
            # 尝试构建
            if [[ -d "cmd" ]]; then
              echo "构建 $service..."
              go build -v ./cmd/...
            fi
            
            cd - > /dev/null
          done

  # 构建和推送镜像
  build-and-push:
    needs: [detect-changes, lint-and-test]
    if: needs.detect-changes.outputs.any-service == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: web
            condition: ${{ needs.detect-changes.outputs.web == 'true' }}
            dockerfile: ./apps/web/Dockerfile
          - service: mobile
            condition: ${{ needs.detect-changes.outputs.mobile == 'true' }}
            dockerfile: ./apps/mobile/Dockerfile
          - service: api-gateway
            condition: ${{ needs.detect-changes.outputs.api-gateway == 'true' }}
            dockerfile: ./apps/api-gateway/Dockerfile
          - service: registry
            condition: ${{ needs.detect-changes.outputs.registry == 'true' }}
            dockerfile: ./apps/registry/Dockerfile
          - service: auth-service
            condition: ${{ needs.detect-changes.outputs.auth-service == 'true' }}
            dockerfile: ./services/auth-service/Dockerfile
          - service: user-service
            condition: ${{ needs.detect-changes.outputs.user-service == 'true' }}
            dockerfile: ./services/user-service/Dockerfile
          - service: workflow-service
            condition: ${{ needs.detect-changes.outputs.workflow-service == 'true' }}
            dockerfile: ./services/workflow-service/Dockerfile
    steps:
      - name: 📥 检出代码
        if: matrix.condition == 'true'
        uses: actions/checkout@v4

      - name: 🔐 登录到容器注册表
        if: matrix.condition == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        if: matrix.condition == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 设置 Docker Buildx
        if: matrix.condition == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建和推送镜像
        if: matrix.condition == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.service == 'mobile' && 'metro' || '' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 自动部署到 staging 环境
  auto-deploy-staging:
    needs: [detect-changes, build-and-push]
    if: |
      needs.detect-changes.outputs.any-service == 'true' && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: 🚀 触发部署到 Staging
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'dev',
              inputs: {
                environment: 'staging',
                service: 'all',
                image_tag: 'dev',
                force_recreate: 'false'
              }
            });

  # 创建发布标签时自动部署到生产环境
  auto-deploy-production:
    needs: [detect-changes, build-and-push]
    if: |
      needs.detect-changes.outputs.any-service == 'true' && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 🏷️ 创建发布标签
        id: tag
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag $TAG
          git push origin $TAG

      - name: 🚀 触发部署到 Production
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                environment: 'production',
                service: 'all',
                image_tag: 'latest',
                force_recreate: 'false'
              }
            });

  # 构建结果汇总
  summary:
    needs: [detect-changes, lint-and-test, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 CI/CD 结果汇总
        run: |
          echo "## 🔄 CI/CD 流水线结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**变更检测:**" >> $GITHUB_STEP_SUMMARY
          echo "- Web: ${{ needs.detect-changes.outputs.web == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile: ${{ needs.detect-changes.outputs.mobile == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Gateway: ${{ needs.detect-changes.outputs.api-gateway == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: ${{ needs.detect-changes.outputs.registry == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Auth Service: ${{ needs.detect-changes.outputs.auth-service == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- User Service: ${{ needs.detect-changes.outputs.user-service == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Service: ${{ needs.detect-changes.outputs.workflow-service == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**流水线状态:**" >> $GITHUB_STEP_SUMMARY
          echo "- 代码检查: ${{ needs.lint-and-test.result == 'success' && '✅ 通过' || needs.lint-and-test.result == 'failure' && '❌ 失败' || '⏭️ 跳过' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 镜像构建: ${{ needs.build-and-push.result == 'success' && '✅ 成功' || needs.build-and-push.result == 'failure' && '❌ 失败' || '⏭️ 跳过' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "**触发信息:**" >> $GITHUB_STEP_SUMMARY
          echo "- 事件: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 分支: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
