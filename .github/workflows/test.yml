name: 🧪 Test Suite

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  GO_VERSION: "1.24.4"
  PNPM_VERSION: "latest"

jobs:
  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [web]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📦 安装依赖
        run: |
          cd apps/${{ matrix.app }}
          pnpm install --frozen-lockfile

      - name: 🔍 代码检查 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          pnpm lint
          pnpm format:check

      - name: 🏗️ 构建测试 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          pnpm build

      - name: 🧪 单元测试 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          echo "单元测试暂未配置，跳过测试步骤"

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [api-gateway, registry, auth-service, user-service, workflow-service]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 缓存 Go 模块
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 📦 安装依赖 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi

          # 检查 go.mod 文件是否存在
          if [[ ! -f "go.mod" ]]; then
            echo "⚠️ go.mod 文件不存在，跳过 ${{ matrix.service }} 服务"
            exit 0
          fi

          go mod download
          go mod tidy

      - name: 🔍 代码检查 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi

          # 检查 go.mod 文件是否存在
          if [[ ! -f "go.mod" ]]; then
            echo "⚠️ go.mod 文件不存在，跳过 ${{ matrix.service }} 服务"
            exit 0
          fi

          go fmt ./...
          go vet ./...

      - name: 🏗️ 构建测试 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi

          # 检查 go.mod 文件是否存在
          if [[ ! -f "go.mod" ]]; then
            echo "⚠️ go.mod 文件不存在，跳过 ${{ matrix.service }} 服务"
            exit 0
          fi

          # 检查是否有 cmd 目录
          if [[ -d "cmd" ]]; then
            go build -v ./cmd/...
          else
            echo "⚠️ 没有找到 cmd 目录，尝试构建当前目录"
            go build -v ./...
          fi

      - name: 🧪 单元测试 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi

          # 检查 go.mod 文件是否存在
          if [[ ! -f "go.mod" ]]; then
            echo "⚠️ go.mod 文件不存在，跳过 ${{ matrix.service }} 服务"
            exit 0
          fi

          # 检查是否有测试文件
          if find . -name "*_test.go" | grep -q .; then
            go test -v -race -coverprofile=coverage.out ./...
          else
            echo "⚠️ 没有找到测试文件，跳过测试"
            # 创建一个空的覆盖率文件以避免后续步骤失败
            echo "mode: set" > coverage.out
          fi

      - name: 📊 上传测试覆盖率
        if: always()
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ${{ matrix.service == 'api-gateway' || matrix.service == 'registry' && format('./apps/{0}/coverage.out', matrix.service) || format('./services/{0}/coverage.out', matrix.service) }}
          flags: backend
          name: ${{ matrix.service }}-coverage

  # 集成测试 (暂时禁用，因为服务还未完全实现)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: false # 暂时禁用集成测试
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🧪 运行集成测试
        run: |
          echo "集成测试暂时禁用，等待服务完全实现后启用"

  # E2E 测试 (暂时禁用)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: false # 暂时禁用 E2E 测试
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🧪 运行 E2E 测试
        run: |
          echo "E2E 测试暂时禁用，等待测试框架配置完成后启用"

  # 安全扫描 (简化版本)
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        continue-on-error: true # 允许扫描失败，不阻塞流水线
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "0" # 不因为发现漏洞而失败

      - name: 🔍 运行 CodeQL 分析
        uses: github/codeql-action/init@v2
        continue-on-error: true
        with:
          languages: javascript, go

      - name: 🏗️ 自动构建
        uses: github/codeql-action/autobuild@v2
        continue-on-error: true

      - name: 📊 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v2
        continue-on-error: true

  # 测试结果汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: always()
    steps:
      - name: 📊 测试结果汇总
        run: |
          echo "## 🧪 测试结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| 测试类型 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 前端测试 | ${{ needs.frontend-tests.result == 'success' && '✅ 通过' || needs.frontend-tests.result == 'failure' && '❌ 失败' || '⏭️ 跳过' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 后端测试 | ${{ needs.backend-tests.result == 'success' && '✅ 通过' || needs.backend-tests.result == 'failure' && '❌ 失败' || '⏭️ 跳过' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security-scan.result == 'success' && '✅ 通过' || needs.security-scan.result == 'failure' && '⚠️ 有警告' || '⏭️ 跳过' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 检查核心测试是否通过 (安全扫描允许失败)
          if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" ]]; then
            echo "🎉 核心测试都通过了！" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 部分核心测试失败，请检查详细日志。" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**注意**: 集成测试和 E2E 测试暂时禁用，等待服务完全实现后启用。" >> $GITHUB_STEP_SUMMARY
