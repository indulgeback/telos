name: 🧪 测试套件

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  GO_VERSION: "1.24"
  PNPM_VERSION: "latest"

jobs:
  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [web]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 🔍 代码检查 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          pnpm lint
          pnpm format:check

      - name: 🏗️ 构建测试 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          pnpm build

      - name: 🧪 单元测试 - ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          # pnpm test --coverage
          echo "单元测试暂未配置"

      - name: 📊 上传测试覆盖率
        if: matrix.app == 'web'
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/${{ matrix.app }}/coverage/lcov.info
          flags: frontend
          name: ${{ matrix.app }}-coverage

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [api-gateway, registry, auth-service, user-service, workflow-service]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 缓存 Go 模块
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 📦 安装依赖 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi
          go mod download
          go mod tidy

      - name: 🔍 代码检查 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi
          go fmt ./...
          go vet ./...
          # golangci-lint run # 如果配置了 golangci-lint

      - name: 🏗️ 构建测试 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi
          go build -v ./...

      - name: 🧪 单元测试 - ${{ matrix.service }}
        run: |
          if [[ "${{ matrix.service }}" == "api-gateway" || "${{ matrix.service }}" == "registry" ]]; then
            cd apps/${{ matrix.service }}
          else
            cd services/${{ matrix.service }}
          fi
          go test -v -race -coverprofile=coverage.out ./...

      - name: 📊 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage.out
          flags: backend
          name: ${{ matrix.service }}-coverage

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: telos_test
          POSTGRES_USER: telos
          POSTGRES_PASSWORD: telos123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 构建测试镜像
        run: |
          # 构建用于测试的镜像
          docker build -t telos-test-api-gateway -f apps/api-gateway/Dockerfile .
          docker build -t telos-test-auth-service -f services/auth-service/Dockerfile .

      - name: 🚀 启动测试服务
        run: |
          # 创建测试用的 docker-compose 配置
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            api-gateway:
              image: telos-test-api-gateway
              ports:
                - "8080:8080"
              environment:
                - DB_HOST=localhost
                - DB_PORT=5432
                - DB_NAME=telos_test
                - DB_USER=telos
                - DB_PASSWORD=telos123
                - REDIS_HOST=localhost
                - REDIS_PORT=6379
              network_mode: host
              
            auth-service:
              image: telos-test-auth-service
              ports:
                - "8081:8081"
              environment:
                - DB_HOST=localhost
                - DB_PORT=5432
                - DB_NAME=telos_test
                - DB_USER=telos
                - DB_PASSWORD=telos123
                - REDIS_HOST=localhost
                - REDIS_PORT=6379
              network_mode: host
          EOF

          # 启动服务
          docker-compose -f docker-compose.test.yml up -d

          # 等待服务启动
          sleep 30

      - name: 🧪 运行集成测试
        run: |
          # 健康检查
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8081/health || exit 1

          # API 测试
          echo "运行 API 集成测试..."
          # 这里可以添加具体的 API 测试脚本

          echo "✅ 集成测试通过"

      - name: 📋 收集测试日志
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs

      - name: 🧹 清理测试环境
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # E2E 测试
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 🏗️ 构建前端应用
        run: |
          cd apps/web
          pnpm build

      - name: 🚀 启动应用
        run: |
          cd apps/web
          pnpm start &

          # 等待应用启动
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: 🧪 运行 E2E 测试
        run: |
          # 使用 Playwright 或 Cypress 运行 E2E 测试
          echo "E2E 测试暂未配置"
          # cd apps/web
          # pnpm test:e2e

      - name: 📸 上传测试截图
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: apps/web/test-results/

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔍 运行 CodeQL 分析
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, go

      - name: 🏗️ 自动构建
        uses: github/codeql-action/autobuild@v2

      - name: 📊 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v2

  # 测试结果汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, integration-tests, security-scan]
    if: always()
    steps:
      - name: 📊 测试结果汇总
        run: |
          echo "## 🧪 测试结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| 测试类型 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 前端测试 | ${{ needs.frontend-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 后端测试 | ${{ needs.backend-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 集成测试 | ${{ needs.integration-tests.result == 'success' && '✅ 通过' || needs.integration-tests.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 检查是否所有测试都通过
          if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "🎉 所有测试都通过了！" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 部分测试失败，请检查详细日志。" >> $GITHUB_STEP_SUMMARY
          fi
