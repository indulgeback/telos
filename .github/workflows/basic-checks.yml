name: 🔍 Basic Checks

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  # 前端检查
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: 📦 安装依赖
        run: |
          # 从根目录安装所有workspace依赖
          pnpm install --frozen-lockfile

      - name: 🔍 检查 Web 应用
        run: |
          echo "🔍 运行 ESLint..."
          pnpm --filter ./apps/web lint
          echo "🎨 检查代码格式..."
          pnpm --filter ./apps/web format:check
          echo "🏗️ 构建测试..."
          pnpm --filter ./apps/web build
          echo "✅ Web 应用检查完成"

  # 后端检查
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.4"

      - name: 🔍 检查 Go 服务
        run: |
          echo "🔍 检查 Go 服务..."

          # 检查每个服务
          services=(
            "apps/api-gateway"
            "apps/registry" 
            "services/auth-service"
            "services/user-service"
            "services/workflow-service"
          )

          for service in "${services[@]}"; do
            echo "检查 $service..."
            
            if [[ ! -d "$service" ]]; then
              echo "⚠️ $service 目录不存在，跳过"
              continue
            fi
            
            cd "$service"
            
            if [[ ! -f "go.mod" ]]; then
              echo "⚠️ $service 没有 go.mod 文件，跳过"
              cd - > /dev/null
              continue
            fi
            
            echo "  📦 下载依赖..."
            go mod download || { echo "❌ go mod download 失败"; cd - > /dev/null; continue; }
            
            echo "  🧹 整理模块..."
            go mod tidy || { echo "❌ go mod tidy 失败"; cd - > /dev/null; continue; }
            
            echo "  🎨 格式检查..."
            if find . -name "*.go" | grep -q .; then
              go fmt ./... || { echo "❌ go fmt 失败"; cd - > /dev/null; continue; }
            fi
            
            echo "  🔍 静态分析..."
            if find . -name "*.go" | grep -q .; then
              go vet ./... || { echo "❌ go vet 失败"; cd - > /dev/null; continue; }
            fi
            
            echo "  🏗️ 构建测试..."
            if [[ -d "cmd" ]]; then
              go build -v ./cmd/... || { echo "❌ 构建失败"; cd - > /dev/null; continue; }
            fi
            
            echo "  ✅ $service 检查通过"
            cd - > /dev/null
          done

          echo "✅ 后端检查完成"

  # 结果汇总
  summary:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()
    steps:
      - name: 📊 检查结果
        run: |
          echo "## 🔍 检查结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| 检查项目 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.frontend.result }}" == "success" ]]; then
            echo "| 前端检查 | ✅ 通过 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 前端检查 | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.backend.result }}" == "success" ]]; then
            echo "| 后端检查 | ✅ 通过 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 后端检查 | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" ]]; then
            echo "🎉 所有检查都通过了！" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 部分检查失败，请查看详细日志。" >> $GITHUB_STEP_SUMMARY
          fi
