version: "3.8"

services:
  # 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: telos-postgres
    environment:
      POSTGRES_DB: telos
      POSTGRES_USER: telos
      POSTGRES_PASSWORD: telos123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telos"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: telos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - telos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 服务注册中心
  registry:
    build:
      context: .
      dockerfile: apps/registry/Dockerfile
    container_name: telos-registry
    ports:
      - "8090:8090"
    environment:
      - PORT=8090
      - NODE_ENV=production
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8090/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API 网关
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: telos-api-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - REGISTRY_URL=http://registry:8090
      - NODE_ENV=production
    depends_on:
      registry:
        condition: service_healthy
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 认证服务
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: telos-auth-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=telos
      - DB_USER=telos
      - DB_PASSWORD=telos123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://registry:8090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      registry:
        condition: service_healthy
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: telos-user-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=telos
      - DB_USER=telos
      - DB_PASSWORD=telos123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://registry:8090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      registry:
        condition: service_healthy
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 工作流服务
  workflow-service:
    build:
      context: .
      dockerfile: services/workflow-service/Dockerfile
    container_name: telos-workflow-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=telos
      - DB_USER=telos
      - DB_PASSWORD=telos123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://registry:8090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      registry:
        condition: service_healthy
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8083/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web 前端应用
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: telos-web
    ports:
      - "8800:8800"
    environment:
      - PORT=8800
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=production
      # 注意：生产环境中应该使用环境变量或密钥管理
      - AUTH_SECRET=your-auth-secret-here
      - GITHUB_CLIENT_ID=your-github-client-id
      - GITHUB_CLIENT_SECRET=your-github-client-secret
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - telos-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8800",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 移动应用 Metro 服务器（开发用）
  mobile-metro:
    build:
      context: .
      dockerfile: apps/mobile/Dockerfile
      target: metro
    container_name: telos-mobile-metro
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
    networks:
      - telos-network
    profiles:
      - development

networks:
  telos-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
